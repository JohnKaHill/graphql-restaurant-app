type Query {
	# Find all drinks
	findAllDrinks: [Beverage]!
	# Find beverage by name
	beverage(name: String!): Beverage!
}

# root mutation type that needs to extended
type Mutation {
	createBeverage(input: ProductInput!, beverageType: BeverageType!, containsAlcohol: Boolean!): Beverage
	updateBeverage(input: ProductInput): Beverage
	deleteBeverage(name: String!): Boolean
}

type Beverage {
	name: String!
	price: Float!
	tax: Int!
	description: String!
	dateCreated: String!
	dateEdited: String
	deprecated: Boolean
	containsAlcohol: Boolean!
	beverageType: BeverageType!
}

enum BeverageType {
	BEER
	COCKTAIL
	WINE
	LIQUOR
	SOFTDRINK
	WATER
}

input ProductInput{
	name: String!
	price: Float
	tax: Int
	description: String
}