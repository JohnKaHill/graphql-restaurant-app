type Query {
	# Find all drinks
	findAllOrders: [Order!]!
	# Find beverage by name
	order(orderId: String!): Order!
	# Find all drinks
	findAllDrinks: [Beverage!]!
	# Find beverage by name
	beverage(name: String!): Beverage!
}

# root mutation type that needs to extended
type Mutation {
	createOrder(input: OrderInput!): Order
	updateOrder(orderId: String!, input: OrderInput!): Order
	deleteOrder(orderId: String!): Boolean

	createBeverage(input: ProductInput!, beverageType: BeverageType!, containsAlcohol: Boolean!): Beverage
	updateBeverage(input: ProductInput): Beverage
	deleteBeverage(name: String!): Boolean

	addBeverageToOrder(orderId: String!, name: String!, amount: Int!): Order
}

type Beverage {
	name: String!
	price: Float!
	tax: Int!
	description: String!
	dateCreated: String!
	dateEdited: String
	deprecated: Boolean!
	containsAlcohol: Boolean!
	beverageType: BeverageType!
}

type Order {
	orderId: String!
	dateCreated: String!
	dateEdited: String
	tableNumber: Int!
	datePaid: String
	paymentMethod: PaymentMethod
	drinks: [Beverage!]
	tax: [Tax!]
	totalAmount: Float
}

type Tax {
	taxId: String!
	taxRate: Int!
	taxTotal: Float!
}

enum PaymentMethod {
		CASH
		DEBIT
		VISA
		MASTERCARD
		BITCOIN
		CHECK
		APPLEPAY
		GOOGLEPAY
}

enum BeverageType {
	BEER
	COCKTAIL
	WINE
	LIQUOR
	SOFTDRINK
	WATER
}

input ProductInput{
	name: String!
	price: Float
	tax: Int
	description: String
}

input OrderInput{
	tableNumber: Int!
}